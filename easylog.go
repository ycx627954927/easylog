// Package easylog provide a simple logger for Go, support out level.
package easylog

import (
	"fmt"
	"io"
	"os"
	"runtime"
	"sync"
	"time"
)

// Log output level.
const (
	Ldebug = iota
	Linfo
	Lwarn
	Lerror
	Lpanic
	Lfatal
)

var levels = [...]string{
	"[DEBUG]",
	"[INFO]",
	"[WARN]",
	"[ERROR]",
	"[PANIC]",
	"[FATAL]",
}

// These flags define which text to prefix to each log entry generated by the Logger.
// Bits are or'ed together to control what's printed.
// There is no control over the order they appear (the order listed
// here) or the format they present (as described in the comments).
// The prefix is followed by a colon only when Llongfile or Lshortfile
// is specified.
// For example, flags Ldate | Ltime (or LstdFlags) produce,
// 	2009/01/23 01:23:23 [INFO] message
// while flags Ldate | Ltime | Lmicroseconds | Llongfile produce,
// 	2009/01/23 01:23:23.123123 [INFO] /a/b/c/d.go:23: message
const (
	Ldate         = 1 << iota     // the date in the local time zone: 2009/01/23
	Ltime                         // the time in the local time zone: 01:23:23
	Lmicroseconds                 // microsecond resolution: 01:23:23.123123.  assumes Ltime.
	Llongfile                     // full file name and line number: /a/b/c/d.go:23
	Lshortfile                    // final file name element and line number: d.go:23. overrides Llongfile
	LUTC                          // if Ldate or Ltime is set, use UTC rather than the local time zone
	LstdFlags     = Ldate | Ltime // initial values for the standard logger
)

// A Logger represents an active logging object that generates lines of
// output to an io.Writer. Each logging operation makes a single call to
// the Writer's Write method. A Logger can be used simultaneously from
// multiple goroutines; it guarantees to serialize access to the Writer.
type Logger struct {
	mu     sync.Mutex // ensures atomic writes; protects the following fields
	prefix string     // prefix to write at beginning of each line
	flag   int        // properties
	level  int        // output level
	out    io.Writer  // destination for output
	buf    []byte     // for accumulating text to write
}

// New creates a new Logger. The out variable sets the
// destination to which log data will be written.
// The prefix appears at the beginning of each generated log line.
// The flag argument defines the logging properties.
func New(out io.Writer, prefix string, flag int) *Logger {
	return &Logger{out: out, prefix: prefix, flag: flag, level: Linfo}
}

// SetOutput sets the output destination for the logger.
func (l *Logger) SetOutput(w io.Writer) {
	l.mu.Lock()
	defer l.mu.Unlock()
	l.out = w
}

var std = New(os.Stderr, "", LstdFlags)

// Cheap integer to fixed-width decimal ASCII. Give a negative width to avoid zero-padding.
func itoa(buf *[]byte, i int, wid int) {
	// Assemble decimal in reverse order.
	var b [20]byte
	bp := len(b) - 1
	for i >= 10 || wid > 1 {
		wid--
		q := i / 10
		b[bp] = byte('0' + i - q*10)
		bp--
		i = q
	}
	// i < 10
	b[bp] = byte('0' + i)
	*buf = append(*buf, b[bp:]...)
}

// formatHeader writes log header to buf in following order:
//   * l.prefix (if it's not blank),
//   * date and/or time (if corresponding flags are provided),
//   * file and line number (if corresponding flags are provided).
func (l *Logger) formatHeader(buf *[]byte, t time.Time, file string, line int, level int) {
	*buf = append(*buf, l.prefix...)
	if l.flag&(Ldate|Ltime|Lmicroseconds) != 0 {
		if l.flag&LUTC != 0 {
			t = t.UTC()
		}
		if l.flag&Ldate != 0 {
			year, month, day := t.Date()
			itoa(buf, year, 4)
			*buf = append(*buf, '/')
			itoa(buf, int(month), 2)
			*buf = append(*buf, '/')
			itoa(buf, day, 2)
			*buf = append(*buf, ' ')
		}
		if l.flag&(Ltime|Lmicroseconds) != 0 {
			hour, min, sec := t.Clock()
			itoa(buf, hour, 2)
			*buf = append(*buf, ':')
			itoa(buf, min, 2)
			*buf = append(*buf, ':')
			itoa(buf, sec, 2)
			if l.flag&Lmicroseconds != 0 {
				*buf = append(*buf, '.')
				itoa(buf, t.Nanosecond()/1e3, 6)
			}
			*buf = append(*buf, ' ')
		}
	}

	*buf = append(*buf, levels[level]...)
	*buf = append(*buf, ' ')

	if l.flag&(Lshortfile|Llongfile) != 0 {
		if l.flag&Lshortfile != 0 {
			short := file
			for i := len(file) - 1; i > 0; i-- {
				if file[i] == '/' {
					short = file[i+1:]
					break
				}
			}
			file = short
		}
		*buf = append(*buf, file...)
		*buf = append(*buf, ':')
		itoa(buf, line, -1)
		*buf = append(*buf, ": "...)
	}
}

// Output writes the output for a logging event. The string s contains
// the text to print after the prefix specified by the flags of the
// Logger. A newline is appended if the last character of s is not
// already a newline. Calldepth is used to recover the PC and is
// provided for generality, although at the moment on all pre-defined
// paths it will be 2.
func (l *Logger) Output(calldepth int, s string, level int) error {
	if level < l.level {
		return nil
	}
	now := time.Now() // get this early.
	var file string
	var line int
	l.mu.Lock()
	defer l.mu.Unlock()
	if l.flag&(Lshortfile|Llongfile) != 0 {
		// Release lock while getting caller info - it's expensive.
		l.mu.Unlock()
		var ok bool
		_, file, line, ok = runtime.Caller(calldepth)
		if !ok {
			file = "???"
			line = 0
		}
		l.mu.Lock()
	}
	l.buf = l.buf[:0]
	l.formatHeader(&l.buf, now, file, line, level)
	l.buf = append(l.buf, s...)
	if len(s) == 0 || s[len(s)-1] != '\n' {
		l.buf = append(l.buf, '\n')
	}
	_, err := l.out.Write(l.buf)
	return err
}

// Debug uses fmt.Sprintln to construct and log a message.
func (l *Logger) Debug(v ...interface{}) {
	l.Output(2, fmt.Sprintln(v...), Ldebug)
}

// Debugf uses fmt.Sprintf to construct and log a message.
func (l *Logger) Debugf(format string, v ...interface{}) {
	l.Output(2, fmt.Sprintf(format, v...), Ldebug)
}

// Info uses fmt.Sprintln to construct and log a message.
func (l *Logger) Info(v ...interface{}) {
	l.Output(2, fmt.Sprintln(v...), Linfo)
}

// Infof uses fmt.Sprintf to construct and log a message.
func (l *Logger) Infof(format string, v ...interface{}) {
	l.Output(2, fmt.Sprintf(format, v...), Linfo)
}

// Warn uses fmt.Sprintln to construct and log a message.
func (l *Logger) Warn(v ...interface{}) {
	l.Output(2, fmt.Sprintln(v...), Lwarn)
}

// Warnf uses fmt.Sprintf to construct and log a message.
func (l *Logger) Warnf(format string, v ...interface{}) {
	l.Output(2, fmt.Sprintf(format, v...), Lwarn)
}

// Error uses fmt.Sprintln to construct and log a message.
func (l *Logger) Error(v ...interface{}) {
	l.Output(2, fmt.Sprintln(v...), Lerror)
}

// Errorf uses fmt.Sprintf to construct and log a message.
func (l *Logger) Errorf(format string, v ...interface{}) {
	l.Output(2, fmt.Sprintf(format, v...), Lerror)
}

// Panic uses fmt.Sprintln to construct and log a message, then panics.
func (l *Logger) Panic(v ...interface{}) {
	s := fmt.Sprintln(v...)
	l.Output(2, s, Lpanic)
	panic(s)
}

// Panicf uses fmt.Sprintf to construct and log a message, then panics.
func (l *Logger) Panicf(format string, v ...interface{}) {
	s := fmt.Sprintf(format, v...)
	l.Output(2, s, Lpanic)
	panic(s)
}

// Fatal uses fmt.Sprintln to construct and log a message, then calls os.Exit(1).
func (l *Logger) Fatal(v ...interface{}) {
	l.Output(2, fmt.Sprintln(v...), Lfatal)
	os.Exit(1)
}

// Fatalf uses fmt.Sprintf to construct and log a message, then calls os.Exit(1).
func (l *Logger) Fatalf(format string, v ...interface{}) {
	l.Output(2, fmt.Sprintf(format, v...), Lfatal)
	os.Exit(1)
}

// Flags returns the output flags for the logger.
func (l *Logger) Flags() int {
	l.mu.Lock()
	defer l.mu.Unlock()
	return l.flag
}

// SetFlags sets the output flags for the logger.
func (l *Logger) SetFlags(flag int) {
	l.mu.Lock()
	defer l.mu.Unlock()
	l.flag = flag
}

// Prefix returns the output prefix for the logger.
func (l *Logger) Prefix() string {
	l.mu.Lock()
	defer l.mu.Unlock()
	return l.prefix
}

// SetPrefix sets the output prefix for the logger.
func (l *Logger) SetPrefix(prefix string) {
	l.mu.Lock()
	defer l.mu.Unlock()
	l.prefix = prefix
}

// Level returns the output level for the logger.
func (l *Logger) Level() int {
	l.mu.Lock()
	defer l.mu.Unlock()
	return l.level
}

// SetLevel sets the output level for the logger.
func (l *Logger) SetLevel(level int) {
	if level < Ldebug {
		level = Ldebug
	}
	if level > Lfatal {
		level = Lfatal
	}
	l.mu.Lock()
	defer l.mu.Unlock()
	l.level = level
}

// Writer returns the output destination for the logger.
func (l *Logger) Writer() io.Writer {
	l.mu.Lock()
	defer l.mu.Unlock()
	return l.out
}

// SetOutput sets the output destination for the standard logger.
func SetOutput(w io.Writer) {
	std.mu.Lock()
	defer std.mu.Unlock()
	std.out = w
}

// Flags returns the output flags for the standard logger.
func Flags() int {
	return std.Flags()
}

// SetFlags sets the output flags for the standard logger.
func SetFlags(flag int) {
	std.SetFlags(flag)
}

// Prefix returns the output prefix for the standard logger.
func Prefix() string {
	return std.Prefix()
}

// SetPrefix sets the output prefix for the standard logger.
func SetPrefix(prefix string) {
	std.SetPrefix(prefix)
}

// Level returns the output level for the standard logger.
func Level() int {
	return std.Level()
}

// SetLevel sets the output level for the standard logger.
func SetLevel(level int) {
	std.SetLevel(level)
}

// These functions write to the standard logger.

// Debug uses fmt.Sprintln to construct and log a message.
func Debug(v ...interface{}) {
	std.Output(2, fmt.Sprintln(v...), Ldebug)
}

// Debugf uses fmt.Sprintf to construct and log a message.
func Debugf(format string, v ...interface{}) {
	std.Output(2, fmt.Sprintf(format, v...), Ldebug)
}

// Info uses fmt.Sprintln to construct and log a message.
func Info(v ...interface{}) {
	std.Output(2, fmt.Sprintln(v...), Linfo)
}

// Infof uses fmt.Sprintf to construct and log a message.
func Infof(format string, v ...interface{}) {
	std.Output(2, fmt.Sprintf(format, v...), Linfo)
}

// Warn uses fmt.Sprintln to construct and log a message.
func Warn(v ...interface{}) {
	std.Output(2, fmt.Sprintln(v...), Lwarn)
}

// Warnf uses fmt.Sprintf to construct and log a message.
func Warnf(format string, v ...interface{}) {
	std.Output(2, fmt.Sprintf(format, v...), Lwarn)
}

// Error uses fmt.Sprintln to construct and log a message.
func Error(v ...interface{}) {
	std.Output(2, fmt.Sprintln(v...), Lerror)
}

// Errorf uses fmt.Sprintf to construct and log a message.
func Errorf(format string, v ...interface{}) {
	std.Output(2, fmt.Sprintf(format, v...), Lerror)
}

// Panic uses fmt.Sprintln to construct and log a message, then panics.
func Panic(v ...interface{}) {
	s := fmt.Sprintln(v...)
	std.Output(2, s, Lpanic)
	panic(s)
}

// Panicf uses fmt.Sprintf to construct and log a message, then panics.
func Panicf(format string, v ...interface{}) {
	s := fmt.Sprintf(format, v...)
	std.Output(2, s, Lpanic)
	panic(s)
}

// Fatal uses fmt.Sprintln to construct and log a message, then calls os.Exit(1).
func Fatal(v ...interface{}) {
	std.Output(2, fmt.Sprintln(v...), Lfatal)
	os.Exit(1)
}

// Fatalf uses fmt.Sprintf to construct and log a message, then calls os.Exit(1).
func Fatalf(format string, v ...interface{}) {
	std.Output(2, fmt.Sprintf(format, v...), Lfatal)
	os.Exit(1)
}
